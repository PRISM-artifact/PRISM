diff -rwu ORIGINAL_PATH/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java MODIFIED_PATH/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
--- ORIGINAL_PATH/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
+++ MODIFIED_PATH/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
@@ -1,5 +1,8 @@
 package org.mockito.internal.stubbing.defaultanswers;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.withSettings;
 import java.io.Serializable;
+import org.mockito.MockSettings;
 import org.mockito.internal.InternalMockHandler;
 import org.mockito.internal.creation.settings.CreationSettings;
 import org.mockito.internal.stubbing.InvocationContainerImpl;
@@ -20,9 +23,11 @@
     if (!new MockCreationValidator().isTypeMockablerawType) {
       return delegate.returnValueForrawType;
     }
-    return getMockinvocation;
+    return getMock(invocation, returnTypeGenericMetadata);
   }
-  private Object getMock(InvocationOnMock invocation) throws Throwable {
+  private Object getMock(
+      InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata)
+      throws Throwable {
     InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());
     InvocationContainerImpl container = InvocationContainerImpl handler.getInvocationContainer();
     for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {
@@ -30,12 +35,29 @@
         return stubbedInvocationMatcher.answerinvocation;
       }
     }
-    return recordDeepStubMock(invocation, container);
+    return recordDeepStubMock(createNewDeepStubMockreturnTypeGenericMetadata, container);
   }
-  private Object recordDeepStubMock(
-      InvocationOnMock invocation, InvocationContainerImpl container) {
-    Class<?> clz = invocation.getMethod().getReturnType();
-    final Object mock = org.mockito.Mockito.mock(clz, this);
+  private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) {
+    return mock(returnTypeGenericMetadata.rawType(), withSettingsUsingreturnTypeGenericMetadata);
+  }
+  private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) {
+    MockSettings mockSettings =
+        returnTypeGenericMetadata.rawExtraInterfaces().length > 0
+            ? withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())
+            : withSettings();
+    return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsingreturnTypeGenericMetadata);
+  }
+  private ReturnsDeepStubs returnsDeepStubsAnswerUsing(
+      final GenericMetadataSupport returnTypeGenericMetadata) {
+    return new ReturnsDeepStubs() {
+      @Override
+      protected GenericMetadataSupport actualParameterizedType(Object mock) {
+        return returnTypeGenericMetadata;
+      }
+    };
+  }
+  private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container)
+      throws Throwable {
     container.addAnswer(
         new Answer<Object>() {
           public Object answer(InvocationOnMock invocation) throws Throwable {
