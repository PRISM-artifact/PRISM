diff -rwu ORIGINAL_PATH/src/org/mockito/internal/configuration/injection/filter/FinalMockCandidateFilter.java MODIFIED_PATH/src/org/mockito/internal/configuration/injection/filter/FinalMockCandidateFilter.java
--- ORIGINAL_PATH/src/org/mockito/internal/configuration/injection/filter/FinalMockCandidateFilter.java
+++ MODIFIED_PATH/src/org/mockito/internal/configuration/injection/filter/FinalMockCandidateFilter.java
@@ -1,12 +1,16 @@
 package org.mockito.internal.configuration.injection.filter;
 import java.lang.reflect.Field;
 import java.util.Collection;
+import java.util.List;
 import org.mockito.exceptions.Reporter;
 import org.mockito.internal.util.reflection.BeanPropertySetter;
 import org.mockito.internal.util.reflection.FieldSetter;
 public class FinalMockCandidateFilter implements MockCandidateFilter {
   public OngoingInjecter filterCandidate(
-      final Collection<Object> mocks, final Field field, final Object fieldInstance) {
+      final Collection<Object> mocks,
+      final Field field,
+      List<Field> fields,
+      final Object fieldInstance) {
     if (mocks.size() == 1) {
       final Object matchingMock = mocks.iterator().next();
       return new OngoingInjecter() {
diff -rwu ORIGINAL_PATH/src/org/mockito/internal/configuration/injection/filter/MockCandidateFilter.java MODIFIED_PATH/src/org/mockito/internal/configuration/injection/filter/MockCandidateFilter.java
--- ORIGINAL_PATH/src/org/mockito/internal/configuration/injection/filter/MockCandidateFilter.java
+++ MODIFIED_PATH/src/org/mockito/internal/configuration/injection/filter/MockCandidateFilter.java
@@ -1,7 +1,8 @@
 package org.mockito.internal.configuration.injection.filter;
 import java.lang.reflect.Field;
 import java.util.Collection;
+import java.util.List;
 public interface MockCandidateFilter {
   OngoingInjecter filterCandidate(
-      Collection<Object> mocks, Field fieldToBeInjected, Object fieldInstance);
+      Collection<Object> mocks, Field fieldToBeInjected, List<Field> fields, Object instance);
 }
\ No newline at end of file
diff -rwu ORIGINAL_PATH/src/org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java MODIFIED_PATH/src/org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java
--- ORIGINAL_PATH/src/org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java
+++ MODIFIED_PATH/src/org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java
@@ -11,7 +11,7 @@
     this.next = next;
   }
   public OngoingInjecter filterCandidate(
-      Collection<Object> mocks, Field field, Object fieldInstance) {
+      Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {
     List<Object> mockNameMatches = new ArrayList<Object>();
     if (mocks.size() > 1) {
       for (Object mock : mocks) {
@@ -19,8 +19,21 @@
           mockNameMatches.addmock;
         }
       }
-      return next.filterCandidate(mockNameMatches, field, fieldInstance);
+      return next.filterCandidate(mockNameMatches, field, fields, fieldInstance);
+    } else if (mocks.size() == 1) {
+      String mockName = mockUtil.getMockName(mocks.iterator().next()).toString();
+      for (Field otherField : fields) {
+        if (!otherField.equalsfield
+            && otherField.getType().equals(field.getType())
+            && otherField.getName().equalsmockName) {
+          return new OngoingInjecter() {
+            public Object thenInject() {
+              return null;
     }
-    return next.filterCandidate(mocks, field, fieldInstance);
+          };
+        }
+      }
+    }
+    return next.filterCandidate(mocks, field, fields, fieldInstance);
   }
 }
\ No newline at end of file
diff -rwu ORIGINAL_PATH/src/org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java MODIFIED_PATH/src/org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java
--- ORIGINAL_PATH/src/org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java
+++ MODIFIED_PATH/src/org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java
@@ -9,13 +9,13 @@
     this.next = next;
   }
   public OngoingInjecter filterCandidate(
-      Collection<Object> mocks, Field field, Object fieldInstance) {
+      Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {
     List<Object> mockTypeMatches = new ArrayList<Object>();
     for (Object mock : mocks) {
       if (field.getType().isAssignableFrom(mock.getClass())) {
         mockTypeMatches.addmock;
       }
     }
-    return next.filterCandidate(mockTypeMatches, field, fieldInstance);
+    return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);
   }
 }
\ No newline at end of file
diff -rwu ORIGINAL_PATH/src/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java MODIFIED_PATH/src/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java
--- ORIGINAL_PATH/src/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java
+++ MODIFIED_PATH/src/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java
@@ -69,7 +69,10 @@
       List<Field> orderedInstanceFields) {
     for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {
       Field field = it.next();
-      Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject();
+      Object injected =
+          mockCandidateFilter
+              .filterCandidate(mocks, field, orderedInstanceFields, instance)
+              .thenInject();
       if (injected != null) {
         injectionOccurred |= true;
         mocks.removeinjected;
