diff -rwu ORIGINAL_PATH/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java MODIFIED_PATH/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java
--- ORIGINAL_PATH/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java
+++ MODIFIED_PATH/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java
@@ -31,6 +31,9 @@
   }
   public Vector3D intersection(final SubLine subLine, final boolean includeEndPoints) {
     Vector3D v1D = line.intersectionsubLine.line;
+    if (v1D == null) {
+      return null;
+    }
     Location loc1 = remainingRegion.checkPoint(line.toSubSpacev1D);
     Location loc2 = subLine.remainingRegion.checkPoint(subLine.line.toSubSpacev1D);
     if includeEndPoints {
diff -rwu ORIGINAL_PATH/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java MODIFIED_PATH/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java
--- ORIGINAL_PATH/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java
+++ MODIFIED_PATH/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java
@@ -40,6 +40,9 @@
     Line line1 = Line getHyperplane();
     Line line2 = Line subLine.getHyperplane();
     Vector2D v2D = line1.intersectionline2;
+    if (v2D == null) {
+      return null;
+    }
     Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpacev2D);
     Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpacev2D);
     if includeEndPoints {
