diff -rwu ORIGINAL_PATH/src/main/java/org/joda/time/field/UnsupportedDurationField.java MODIFIED_PATH/src/main/java/org/joda/time/field/UnsupportedDurationField.java
--- ORIGINAL_PATH/src/main/java/org/joda/time/field/UnsupportedDurationField.java
+++ MODIFIED_PATH/src/main/java/org/joda/time/field/UnsupportedDurationField.java
@@ -76,9 +76,6 @@
     return 0;
   }
   public int compareTo(DurationField durationField) {
-    if (durationField.isSupported()) {
-      return 1;
-    }
     return 0;
   }
   public boolean equals(Object obj) {
diff -rwu ORIGINAL_PATH/src/main/java/org/joda/time/Partial.java MODIFIED_PATH/src/main/java/org/joda/time/Partial.java
--- ORIGINAL_PATH/src/main/java/org/joda/time/Partial.java
+++ MODIFIED_PATH/src/main/java/org/joda/time/Partial.java
@@ -70,6 +70,21 @@
       DateTimeFieldType loopType = types[i];
       DurationField loopUnitField = loopType.getDurationType().getFieldiChronology;
       if (i > 0) {
+        if (loopUnitField.isSupported() == false) {
+          if (lastUnitField.isSupported()) {
+            throw new IllegalArgumentException(
+                "Types array must be in order largest-smallest: "
+                    + types[i - 1].getName()
+                    + " < "
+                    + loopType.getName());
+          } else {
+            throw new IllegalArgumentException(
+                "Types array must not contain duplicate unsupported: "
+                    + types[i - 1].getName()
+                    + " and "
+                    + loopType.getName());
+          }
+        }
         int compare = lastUnitField.compareToloopUnitField;
         if (compare < 0) {
           throw new IllegalArgumentException(
@@ -77,7 +92,7 @@
                   + types[i - 1].getName()
                   + " < "
                   + loopType.getName());
-        } else if (compare == 0) {
+        } else if (compare == 0 && lastUnitField.equalsloopUnitField) {
           if (types[i - 1].getRangeDurationType() == null) {
             if (loopType.getRangeDurationType() == null) {
               throw new IllegalArgumentException(
