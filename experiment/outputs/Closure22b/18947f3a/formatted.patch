diff -rwu ORIGINAL_PATH/src/com/google/javascript/jscomp/CheckSideEffects.java MODIFIED_PATH/src/com/google/javascript/jscomp/CheckSideEffects.java
--- ORIGINAL_PATH/src/com/google/javascript/jscomp/CheckSideEffects.java
+++ MODIFIED_PATH/src/com/google/javascript/jscomp/CheckSideEffects.java
@@ -38,40 +38,15 @@
     if (parent == null) {
       return;
     }
-    if (parent.getType() == Token.COMMA) {
-      Node gramps = parent.getParent();
-      if (gramps.isCall() && parent == gramps.getFirstChild()) {
-        if (n == parent.getFirstChild()
-            && parent.getChildCount() == 2
-            && n.getNext().isName()
-            && "eval".equals(n.getNext().getString())) {
+    if (n.isExprResult() || n.isBlock()) {
           return;
         }
-      }
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
-        }
-      }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (parent.getType() == Token.FOR
-          && parent.getChildCount() == 4
-          && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {
-      } else {
+    if (n.isQualifiedName() && n.getJSDocInfo() != null) {
         return;
       }
-    }
     boolean isResultUsed = NodeUtil.isExpressionResultUsedn;
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
     if (!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
-      if (n.isQualifiedName() && n.getJSDocInfo() != null) {
-        return;
-      } else if (n.isExprResult()) {
-        return;
-      }
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
