diff -rwu ORIGINAL_PATH/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java MODIFIED_PATH/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java
--- ORIGINAL_PATH/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java
+++ MODIFIED_PATH/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java
@@ -1,52 +1,26 @@
 package org.apache.commons.math.optimization.univariate;
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.MaxIterationsExceededException;
-import org.apache.commons.math.analysis.UnivariateRealFunction;
 import org.apache.commons.math.exception.NotStrictlyPositiveException;
 import org.apache.commons.math.optimization.GoalType;
 public class BrentOptimizer extends AbstractUnivariateRealOptimizer {
   private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt5);
   public BrentOptimizer() {
-    setMaxEvaluationsInteger.MAX_VALUE;
+    setMaxEvaluations1000;
     setMaximalIterationCount100;
-    setAbsoluteAccuracy(1E-10);
-    setRelativeAccuracy(1.0e-14);
+    setAbsoluteAccuracy(1e-11);
+    setRelativeAccuracy(1e-9);
   }
   protected double doOptimize() throws MaxIterationsExceededException, FunctionEvaluationException {
-    throw new UnsupportedOperationException();
-  }
-  public double optimize(
-      final UnivariateRealFunction f,
-      final GoalType goalType,
-      final double min,
-      final double max,
-      final double startValue)
-      throws MaxIterationsExceededException, FunctionEvaluationException {
-    clearResult();
     return localMin(
         getGoalType() == GoalType.MINIMIZE,
-        f,
-        goalType,
-        min,
-        startValue,
-        max,
+        getMin(),
+        getStartValue(),
+        getMax(),
         getRelativeAccuracy(),
         getAbsoluteAccuracy());
   }
-  public double optimize(
-      final UnivariateRealFunction f, final GoalType goalType, final double min, final double max)
-      throws MaxIterationsExceededException, FunctionEvaluationException {
-    return optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min));
-  }
-  private double localMin(
-      boolean isMinim,
-      UnivariateRealFunction f,
-      GoalType goalType,
-      double lo,
-      double mid,
-      double hi,
-      double eps,
-      double t)
+  private double localMin(boolean isMinim, double lo, double mid, double hi, double eps, double t)
       throws MaxIterationsExceededException, FunctionEvaluationException {
     if (eps <= 0) {
       throw new NotStrictlyPositiveExceptioneps;
@@ -67,14 +41,13 @@
     double w = x;
     double d = 0;
     double e = 0;
-    double fx = computeObjectiveValue(f, x);
-    if (goalType == GoalType.MAXIMIZE) {
+    double fx = computeObjectiveValuex;
+    if (!isMinim) {
       fx = -fx;
     }
     double fv = fx;
     double fw = fx;
-    int count = 0;
-    while (count < maximalIterationCount) {
+    while true {
       double m = 0.5 * (a + b);
       final double tol1 = eps * Math.absx + t;
       final double tol2 = 2 * tol1;
@@ -130,8 +103,8 @@
         } else {
           u = x + d;
         }
-        double fu = computeObjectiveValue(f, u);
-        if (goalType == GoalType.MAXIMIZE) {
+        double fu = computeObjectiveValueu;
+        if (!isMinim) {
           fu = -fu;
         }
         if (fu <= fx) {
@@ -163,11 +136,10 @@
           }
         }
       } else { 
-        setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);
+        setFunctionValue(isMinim ? fx : -fx);
         return x;
       }
-      ++count;
+      incrementIterationsCounter();
     }
-    throw new MaxIterationsExceededExceptionmaximalIterationCount;
   }
 }
\ No newline at end of file
