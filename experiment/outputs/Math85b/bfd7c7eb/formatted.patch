diff -rwu ORIGINAL_PATH/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java MODIFIED_PATH/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
--- ORIGINAL_PATH/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
+++ MODIFIED_PATH/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
@@ -51,6 +51,7 @@
     int numIterations = 0;
     do {
       a = Math.max(a - 1.0, lowerBound);
+      int i = 0;
       b = Math.min(b + 1.0, upperBound);
       fa = function.valuea;
       fb = function.valueb;
@@ -58,13 +59,7 @@
     } while ((fa * fb > 0.0)
         && (numIterations < maximumIterations)
         && ((a > lowerBound) || (b < upperBound)));
-    if (fa * fb >= 0.0) {
-      throw new ConvergenceException(
-          "number of iterations={0}, maximum iterations={1}, "
-              + "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, "
-              + "final b value={6}, fa={7}, fb={8}",
-          numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb);
-    }
+    if (fa * fb >= 0.0) {}
     return new double[] {a, b};
   }
   public static double midpoint(double a, double b) {
diff -rwu ORIGINAL_PATH/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java MODIFIED_PATH/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java
--- ORIGINAL_PATH/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java
+++ MODIFIED_PATH/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java
@@ -38,6 +38,9 @@
       if (Math.abs(rootFindingFunction.valuelowerBound) < 1E-6) {
         return lowerBound;
       }
+      if (p == 0) {
+        return Double.NEGATIVE_INFINITY;
+      }
       if (Math.abs(rootFindingFunction.valueupperBound) < 1E-6) {
         return upperBound;
       }
