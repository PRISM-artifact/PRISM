diff -rwu ORIGINAL_PATH/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java MODIFIED_PATH/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
--- ORIGINAL_PATH/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
+++ MODIFIED_PATH/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
@@ -5,7 +5,9 @@
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 import org.apache.commons.math.linear.MatrixUtils;
 import org.apache.commons.math.linear.RealMatrix;
 import org.apache.commons.math.linear.RealMatrixImpl;
@@ -169,17 +171,16 @@
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
     double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    Set<Integer> basicRows = new HashSet<Integer>();
     for (int i = 0; i < coefficients.length; i++) {
       basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+      if (basicRows.containsbasicRow) {
+        coefficients[i] = 0;
+      } else {
+        basicRows.addbasicRow;
       coefficients[i] =
           (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()))
               - (restrictToNonNegative ? 0 : mostNegative);
-      if (basicRow != null) {
-        for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-          if (tableau.getEntry(basicRow, j) == 1) {
-            coefficients[i] = 0;
-          }
-        }
       }
     }
     return new RealPointValuePair(coefficients, f.getValuecoefficients);
