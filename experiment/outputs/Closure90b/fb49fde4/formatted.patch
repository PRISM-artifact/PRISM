diff -rwu ORIGINAL_PATH/src/com/google/javascript/jscomp/FunctionTypeBuilder.java MODIFIED_PATH/src/com/google/javascript/jscomp/FunctionTypeBuilder.java
--- ORIGINAL_PATH/src/com/google/javascript/jscomp/FunctionTypeBuilder.java
+++ MODIFIED_PATH/src/com/google/javascript/jscomp/FunctionTypeBuilder.java
@@ -114,7 +114,7 @@
   private class ThisTypeValidator implements Predicate<JSType> {
     @Override
     public boolean apply(JSType type) {
-      if (!type.isSubtype(typeRegistry.getNativeTypeOBJECT_TYPE)) {
+      if (!type.restrictByNotNullOrUndefined().isSubtype(typeRegistry.getNativeTypeOBJECT_TYPE)) {
         reportWarning(THIS_TYPE_NON_OBJECT, type.toString());
         return false;
       }
diff -rwu ORIGINAL_PATH/src/com/google/javascript/rhino/jstype/FunctionType.java MODIFIED_PATH/src/com/google/javascript/rhino/jstype/FunctionType.java
--- ORIGINAL_PATH/src/com/google/javascript/rhino/jstype/FunctionType.java
+++ MODIFIED_PATH/src/com/google/javascript/rhino/jstype/FunctionType.java
@@ -535,6 +535,9 @@
     call = ArrowType safeResolve(call, t, scope);
     prototype = FunctionPrototypeType safeResolve(prototype, t, scope);
     JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (maybeTypeOfThis != null) {
+      maybeTypeOfThis = maybeTypeOfThis.restrictByNotNullOrUndefined();
+    }
     if (maybeTypeOfThis instanceof ObjectType) {
       typeOfThis = ObjectType maybeTypeOfThis;
     }
