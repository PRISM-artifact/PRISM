diff -rwu ORIGINAL_PATH/src/main/java/org/apache/commons/math3/util/FastMath.java MODIFIED_PATH/src/main/java/org/apache/commons/math3/util/FastMath.java
--- ORIGINAL_PATH/src/main/java/org/apache/commons/math3/util/FastMath.java
+++ MODIFIED_PATH/src/main/java/org/apache/commons/math3/util/FastMath.java
@@ -1,6 +1,7 @@
 package org.apache.commons.math3.util;
 import java.io.PrintStream;
 public class FastMath {
+  private static final double LOG_MAX_VALUE = StrictMath.logDouble.MAX_VALUE;
   public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;
   public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;
   static final int EXP_INT_TABLE_MAX_INDEX = 750;
@@ -192,11 +193,20 @@
       return x;
     }
     if (x > 20) {
+      if (x >= LOG_MAX_VALUE) {
+        final double t = exp(0.5 * x);
+        return (0.5 * t) * t;
+      } else {
       return 0.5 * expx;
     }
-    if (x < -20) {
+    } else if (x < -20) {
+      if (x <= -LOG_MAX_VALUE) {
+        final double t = exp(-0.5 * x);
+        return (0.5 * t) * t;
+      } else {
       return 0.5 * exp(-x);
     }
+    }
     final double hiPrec[] = new double[2];
     if (x < 0.0) {
       x = -x;
@@ -229,11 +239,20 @@
       return x;
     }
     if (x > 20) {
+      if (x >= LOG_MAX_VALUE) {
+        final double t = exp(0.5 * x);
+        return (0.5 * t) * t;
+      } else {
       return 0.5 * expx;
     }
-    if (x < -20) {
+    } else if (x < -20) {
+      if (x <= -LOG_MAX_VALUE) {
+        final double t = exp(-0.5 * x);
+        return (-0.5 * t) * t;
+      } else {
       return -0.5 * exp(-x);
     }
+    }
     if (x == 0) {
       return x;
     }
