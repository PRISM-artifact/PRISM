--- Mockito3b/src/org/mockito/internal/invocation/InvocationMatcher.java	2021-10-27 14:18:34.053493218 +0900
+++ Mockito3f/src/org/mockito/internal/invocation/InvocationMatcher.java	2021-10-27 14:18:37.825540666 +0900
@@ -124,10 +124,12 @@
                     ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
                 }
             }
-            for (int position = indexOfVararg; position < matchers.size(); position++) {
-                Matcher m = matchers.get(position);
+            for (Matcher m : uniqueMatcherSet(indexOfVararg)) {
                 if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);
+                    Object rawArgument = invocation.getRawArguments()[indexOfVararg];
+                    for (int i = 0; i < Array.getLength(rawArgument); i++) {
+                        ((CapturesArguments) m).captureFrom(Array.get(rawArgument, i));
+                    }
                 }
             }
         } else {
@@ -140,6 +142,18 @@
         }
     }
 
+    private Set<Matcher> uniqueMatcherSet(int indexOfVararg) {
+        HashSet<Matcher> set = new HashSet<Matcher>();
+        for (int position = indexOfVararg; position < matchers.size(); position++) {
+            Matcher matcher = matchers.get(position);
+            if(matcher instanceof MatcherDecorator) {
+                set.add(((MatcherDecorator) matcher).getActualMatcher());
+            } else {
+                set.add(matcher);
+            }
+        }
+        return set;
+    }
 
     public static List<InvocationMatcher> createFrom(List<Invocation> invocations) {
         LinkedList<InvocationMatcher> out = new LinkedList<InvocationMatcher>();