diff -rwu ORIGINAL_PATH/src/org/mockito/internal/creation/MockSettingsImpl.java MODIFIED_PATH/src/org/mockito/internal/creation/MockSettingsImpl.java
--- ORIGINAL_PATH/src/org/mockito/internal/creation/MockSettingsImpl.java
+++ MODIFIED_PATH/src/org/mockito/internal/creation/MockSettingsImpl.java
@@ -10,8 +10,10 @@
   private Object spiedInstance;
   private Answer<Object> defaultAnswer;
   private MockName mockName;
+  private boolean serializable;
   public MockSettings serializable() {
-    return this.extraInterfacesjava.io.Serializable.class;
+    this.serializable = true;
+    return this;
   }
   public MockSettings extraInterfaces(Class<?>... extraInterfaces) {
     if (extraInterfaces == null || extraInterfaces.length == 0) {
@@ -53,8 +55,7 @@
     return defaultAnswer;
   }
   public boolean isSerializable() {
-    return extraInterfaces != null
-        && java.util.Arrays.asListextraInterfaces.containsjava.io.Serializable.class;
+    return serializable;
   }
   public void initiateMockName(Class classToMock) {
     mockName = new MockName(name, classToMock);
diff -rwu ORIGINAL_PATH/src/org/mockito/internal/util/MockUtil.java MODIFIED_PATH/src/org/mockito/internal/util/MockUtil.java
--- ORIGINAL_PATH/src/org/mockito/internal/util/MockUtil.java
+++ MODIFIED_PATH/src/org/mockito/internal/util/MockUtil.java
@@ -1,6 +1,7 @@
 package org.mockito.internal.util;
 import static org.mockito.Mockito.RETURNS_DEFAULTS;
 import static org.mockito.Mockito.withSettings;
+import java.io.Serializable;
 import org.mockito.cglib.proxy.*;
 import org.mockito.exceptions.misusing.NotAMockException;
 import org.mockito.internal.MockHandler;
@@ -27,7 +28,14 @@
     MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHandler, settings);
     Class<?>[] interfaces = settings.getExtraInterfaces();
     Class<?>[] ancillaryTypes;
+    if (settings.isSerializable()) {
+      ancillaryTypes =
+          interfaces == null
+              ? new Class<?>[] {Serializable.class}
+              : new ArrayUtils().concat(interfaces, Serializable.class);
+    } else {
     ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;
+    }
     Object spiedInstance = settings.getSpiedInstance();
     T mock = ClassImposterizer.INSTANCE.imposterise(filter, classToMock, ancillaryTypes);
     if (spiedInstance != null) {
