diff -rwu ORIGINAL_PATH/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java MODIFIED_PATH/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
--- ORIGINAL_PATH/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
+++ MODIFIED_PATH/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
@@ -9,7 +9,7 @@
   protected BaseOptimizer(ConvergenceChecker<PAIR> checker) {
     this.checker = checker;
     evaluations = new Incrementor(0, new MaxEvalCallback());
-    iterations = new Incrementor(0, new MaxIterCallback());
+    iterations = new Incrementor(Integer.MAX_VALUE, new MaxIterCallback());
   }
   public int getMaxEvaluations() {
     return evaluations.getMaximalCount();
diff -rwu ORIGINAL_PATH/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java MODIFIED_PATH/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java
--- ORIGINAL_PATH/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java
+++ MODIFIED_PATH/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java
@@ -75,15 +75,14 @@
       delta += r[i] * searchDirection[i];
     }
     PointValuePair current = null;
-    int iter = 0;
     int maxEval = getMaxEvaluations();
     while true {
-      ++iter;
+      incrementIterationCount();
       final double objective = computeObjectiveValuepoint;
       PointValuePair previous = current;
       current = new PointValuePair(point, objective);
       if (previous != null) {
-        if (checker.converged(iter, previous, current)) {
+        if (checker.converged(getIterations(), previous, current)) {
           return current;
         }
       }
@@ -122,7 +121,7 @@
           throw new MathInternalError();
       }
       steepestDescent = newSteepestDescent;
-      if (iter % n == 0 || beta < 0) {
+      if (getIterations() % n == 0 || beta < 0) {
         searchDirection = steepestDescent.clone();
       } else {
         for (int i = 0; i < n; ++i) {
diff -rwu ORIGINAL_PATH/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java MODIFIED_PATH/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java
--- ORIGINAL_PATH/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java
+++ MODIFIED_PATH/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java
@@ -140,6 +140,7 @@
     PointValuePair lastResult = null;
     generationLoop:
     for (iterations = 1; iterations <= maxIterations; iterations++) {
+      incrementIterationCount();
       final RealMatrix arz = randn1(dimension, lambda);
       final RealMatrix arx = zeros(dimension, lambda);
       final double[] fitness = new double[lambda];
diff -rwu ORIGINAL_PATH/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java MODIFIED_PATH/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java
--- ORIGINAL_PATH/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java
+++ MODIFIED_PATH/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java
@@ -62,9 +62,8 @@
     double[] x = guess;
     double fVal = computeObjectiveValuex;
     double[] x1 = x.clone();
-    int iter = 0;
     while true {
-      ++iter;
+      incrementIterationCount();
       double fX = fVal;
       double fX2 = 0;
       double delta = 0;
@@ -90,7 +89,7 @@
       final PointValuePair current = new PointValuePair(x, fVal);
       if (!stop) { 
         if (checker != null) {
-          stop = checker.converged(iter, previous, current);
+          stop = checker.converged(getIterations(), previous, current);
         }
       }
       if stop {
diff -rwu ORIGINAL_PATH/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java MODIFIED_PATH/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java
--- ORIGINAL_PATH/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java
+++ MODIFIED_PATH/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java
@@ -46,7 +46,7 @@
     int iteration = 0;
     final ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();
     while true {
-      if (iteration > 0) {
+      if (getIterations() > 0) {
         boolean converged = true;
         for (int i = 0; i < simplex.getSize(); i++) {
           PointValuePair prev = previous[i];
@@ -58,7 +58,7 @@
       }
       previous = simplex.getPoints();
       simplex.iterate(evalFunc, comparator);
-      ++iteration;
+      incrementIterationCount();
     }
   }
   @Override
diff -rwu ORIGINAL_PATH/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java MODIFIED_PATH/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java
--- ORIGINAL_PATH/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java
+++ MODIFIED_PATH/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java
@@ -40,9 +40,8 @@
     final double[] currentPoint = getStartPoint();
     final int nC = currentPoint.length;
     PointVectorValuePair current = null;
-    int iter = 0;
     for (boolean converged = false; !converged; ) {
-      ++iter;
+      incrementIterationCount();
       PointVectorValuePair previous = current;
       final double[] currentObjective = computeObjectiveValuecurrentPoint;
       final double[] currentResiduals = computeResidualscurrentObjective;
@@ -78,7 +77,7 @@
         throw new ConvergenceExceptionLocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM;
       }
       if (previous != null) {
-        converged = checker.converged(iter, previous, current);
+        converged = checker.converged(getIterations(), previous, current);
         if converged {
           setCost(computeCostcurrentResiduals);
           return current;
diff -rwu ORIGINAL_PATH/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java MODIFIED_PATH/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java
--- ORIGINAL_PATH/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java
+++ MODIFIED_PATH/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java
@@ -90,10 +90,9 @@
     double currentCost = computeCostcurrentResiduals;
     lmPar = 0;
     boolean firstIteration = true;
-    int iter = 0;
     final ConvergenceChecker<PointVectorValuePair> checker = getConvergenceChecker();
     while true {
-      ++iter;
+      incrementIterationCount();
       final PointVectorValuePair previous = current;
       qrDecomposition(computeWeightedJacobiancurrentPoint);
       weightedResidual = weightMatrixSqrt.operatecurrentResiduals;
@@ -212,7 +211,7 @@
           }
           xNorm = FastMath.sqrtxNorm;
           if (checker != null) {
-            if (checker.converged(iter, previous, current)) {
+            if (checker.converged(getIterations(), previous, current)) {
               setCostcurrentCost;
               return current;
             }
