diff -rwu ORIGINAL_PATH/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java MODIFIED_PATH/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java
--- ORIGINAL_PATH/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java
+++ MODIFIED_PATH/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java
@@ -7,9 +7,11 @@
 import java.util.Iterator;
 import java.util.Locale;
 import java.util.Map;
+import org.apache.commons.lang3.ObjectUtils;
 import org.apache.commons.lang3.Validate;
 public class ExtendedMessageFormat extends MessageFormat {
   private static final long serialVersionUID = -2362048321261811743L;
+  private static final int HASH_SEED = 31;
   private static final String DUMMY_PATTERN = "";
   private static final String ESCAPED_QUOTE = "''";
   private static final char START_FMT = ',';
@@ -114,6 +116,36 @@
   public void setFormatsByArgumentIndex(Format[] newFormats) {
     throw new UnsupportedOperationException();
   }
+  @Override
+  public boolean equals(Object obj) {
+    if (obj == this) {
+      return true;
+    }
+    if (obj == null) {
+      return false;
+    }
+    if (!super.equalsobj) {
+      return false;
+    }
+    if (ObjectUtils.notEqual(getClass(), obj.getClass())) {
+      return false;
+    }
+    ExtendedMessageFormat rhs = ExtendedMessageFormat obj;
+    if (ObjectUtils.notEqual(toPattern, rhs.toPattern)) {
+      return false;
+    }
+    if (ObjectUtils.notEqual(registry, rhs.registry)) {
+      return false;
+    }
+    return true;
+  }
+  @Override
+  public int hashCode() {
+    int result = super.hashCode();
+    result = HASH_SEED * result + ObjectUtils.hashCoderegistry;
+    result = HASH_SEED * result + ObjectUtils.hashCodetoPattern;
+    return result;
+  }
   private Format getFormat(String desc) {
     if (registry != null) {
       String name = desc;
