diff -rwu ORIGINAL_PATH/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java MODIFIED_PATH/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
--- ORIGINAL_PATH/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
+++ MODIFIED_PATH/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
@@ -16,7 +16,6 @@
     Integer minPos = null;
     for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
       if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {
-        minValue = tableau.getEntry(0, i);
         minPos = i;
       }
     }
diff -rwu ORIGINAL_PATH/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java MODIFIED_PATH/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
--- ORIGINAL_PATH/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
+++ MODIFIED_PATH/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
@@ -184,6 +184,10 @@
         coefficients[i] = 0;
       } else {
         basicRows.addbasicRow;
+        for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) {
+          int row = getBasicRow(getArtificialVariableOffset() + artificialVar);
+          subtractRow(0, row, 1.0);
+        }
         coefficients[i] =
             (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()))
                 - (restrictToNonNegative ? 0 : mostNegative);
