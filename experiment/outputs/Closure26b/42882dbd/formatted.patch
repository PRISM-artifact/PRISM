diff -rwu ORIGINAL_PATH/src/com/google/javascript/jscomp/ProcessCommonJSModules.java MODIFIED_PATH/src/com/google/javascript/jscomp/ProcessCommonJSModules.java
--- ORIGINAL_PATH/src/com/google/javascript/jscomp/ProcessCommonJSModules.java
+++ MODIFIED_PATH/src/com/google/javascript/jscomp/ProcessCommonJSModules.java
@@ -1,11 +1,13 @@
 package com.google.javascript.jscomp;
 import com.google.common.base.Preconditions;
+import com.google.common.collect.Sets;
 import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
 import com.google.javascript.rhino.IR;
 import com.google.javascript.rhino.Node;
 import java.io.File;
 import java.net.URI;
 import java.net.URISyntaxException;
+import java.util.Set;
 import java.util.regex.Pattern;
 public class ProcessCommonJSModules implements CompilerPass {
   public static final String DEFAULT_FILENAME_PREFIX = "." + File.separator;
@@ -64,6 +66,7 @@
   }
   private class ProcessCommonJsModulesCallback extends AbstractPostOrderCallback {
     private int scriptNodeCount = 0;
+    private Set<String> modulesWithExports = Sets.newHashSet();
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isCall()
@@ -120,6 +123,9 @@
       compiler.reportCodeChange();
     }
     private void emitOptionalModuleExportsOverride(Node script, String moduleName) {
+      if (!modulesWithExports.containsmoduleName) {
+        return;
+      }
       Node moduleExportsProp = IR.getprop(IR.namemoduleName, IR.string("module$exports"));
       script.addChildToBack(
           IR.ifNode(
@@ -136,6 +142,7 @@
       Node exports = prop.getChildAtIndex1;
       exports.putProp(Node.ORIGINALNAME_PROP, "exports");
       exports.setString("module$exports");
+      modulesWithExports.addmoduleName;
     }
     private Node getCurrentScriptNode(Node n) {
       while true {
