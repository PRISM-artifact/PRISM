diff -rwu ORIGINAL_PATH/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java MODIFIED_PATH/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
--- ORIGINAL_PATH/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
+++ MODIFIED_PATH/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
@@ -459,7 +459,6 @@
       for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
         if (work[i + 2] <= 0) {
           i0 = 1 + i / 4;
-          break;
         }
         if (diagMin >= 4 * offDiagMax) {
           diagMin = Math.min(diagMin, work[i + 4]);
@@ -609,6 +608,7 @@
           work[4 * deflatedEnd - 3 - pingPong] = 0.0;
           dMin = 0.0;
           updateSigmatau;
+          final int upperStart = 5 * main.length;
           return deflatedEnd;
         } else if (dMin < 0.0) {
           if (tType < -22) {
@@ -634,10 +634,14 @@
     if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
       int j = 4 * n - 1;
       for (int i = 0; i < j; i += 4) {
-        for (int k = 0; k < 4; k += step) {
-          final double tmp = work[i + k];
-          work[i + k] = work[j - k];
-          work[j - k] = tmp;
+        if (tType < -22) {
+          tau = 0.0;
+        } else if (dMin1 > 0.0) {
+          tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
+          tType -= 11;
+        } else {
+          tau *= 0.25;
+          tType -= 12;
         }
         j -= 4;
       }
