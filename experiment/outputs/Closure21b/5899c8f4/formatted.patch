diff -rwu ORIGINAL_PATH/src/com/google/javascript/jscomp/CheckSideEffects.java MODIFIED_PATH/src/com/google/javascript/jscomp/CheckSideEffects.java
--- ORIGINAL_PATH/src/com/google/javascript/jscomp/CheckSideEffects.java
+++ MODIFIED_PATH/src/com/google/javascript/jscomp/CheckSideEffects.java
@@ -38,7 +38,7 @@
     if (parent == null) {
       return;
     }
-    if (n.isExprResult()) {
+    if (n.isExprResult() || n.isBlock()) {
       return;
     }
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
@@ -46,26 +46,7 @@
     }
     boolean isResultUsed = NodeUtil.isExpressionResultUsedn;
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
-    if (parent.getType() == Token.COMMA) {
-      if isResultUsed {
-        return;
-      }
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
-        }
-      }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (!(parent.getType() == Token.FOR
-          && parent.getChildCount() == 4
-          && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
-        return;
-      }
-    }
-    if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+    if (!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
