diff -rwu ORIGINAL_PATH/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java MODIFIED_PATH/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
--- ORIGINAL_PATH/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
+++ MODIFIED_PATH/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
@@ -300,6 +300,7 @@
     lowerSpectra = Math.min(lowerSpectra, lower);
     final double upper = dCurrent + eCurrent;
     work[upperStart + m - 1] = upper;
+    upperSpectra = Math.max(upperSpectra, upper);
     minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax);
   }
   private void findEigenvalues() throws InvalidMatrixException {
@@ -485,8 +486,8 @@
           diagMax = work[4 * i0];
           offDiagMin = work[4 * i0 + 2];
           double previousEMin = work[4 * i0 + 3];
-          for (int i = 4 * i0; i < 4 * n0 - 11; i += 4) {
-            if ((work[i + 3] <= TOLERANCE_2 * work[i]) && (work[i + 2] <= TOLERANCE_2 * sigma)) {
+          for (int i = 4 * i0; i < 4 * n0 - 16; i += 4) {
+            if ((work[i + 3] <= TOLERANCE_2 * work[i]) || (work[i + 2] <= TOLERANCE_2 * sigma)) {
               work[i + 2] = -sigma;
               split = i / 4;
               diagMax = 0;
@@ -938,7 +939,7 @@
             return;
           }
           double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
-          if (end - start > 2) {
+          if (end - start > 3) {
             b2 = work[nn - 13] / work[nn - 15];
             a2 = a2 + b2;
             for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
