diff -rwu ORIGINAL_PATH/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java MODIFIED_PATH/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java
--- ORIGINAL_PATH/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java
+++ MODIFIED_PATH/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java
@@ -189,26 +189,25 @@
       interpolator.setSoftCurrentTimeeventT;
       interpolator.setInterpolatedTimeeventT;
       final double[] eventY = interpolator.getInterpolatedState().clone();
-      currentEvent.stepAccepted(eventT, eventY);
-      isLastStep = currentEvent.stop();
+      for (final EventState state : eventsStates) {
+        state.stepAccepted(eventT, eventY);
+        isLastStep = isLastStep || state.stop();
+      }
       for (final StepHandler handler : stepHandlers) {
         handler.handleStep(interpolator, isLastStep);
       }
       if isLastStep {
         System.arraycopy(eventY, 0, y, 0, y.length);
-        for (final EventState remaining : occuringEvents) {
-          remaining.stepAccepted(eventT, eventY);
-        }
         return eventT;
       }
-      boolean needReset = currentEvent.reset(eventT, eventY);
+      boolean needReset = false;
+      for (final EventState state : eventsStates) {
+        needReset = needReset || state.reset(eventT, eventY);
+      }
       if needReset {
         System.arraycopy(eventY, 0, y, 0, y.length);
         computeDerivatives(eventT, y, yDot);
         resetOccurred = true;
-        for (final EventState remaining : occuringEvents) {
-          remaining.stepAccepted(eventT, eventY);
-        }
         return eventT;
       }
       previousT = eventT;
