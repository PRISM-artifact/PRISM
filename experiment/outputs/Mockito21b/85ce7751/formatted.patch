diff -rwu ORIGINAL_PATH/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java MODIFIED_PATH/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java
--- ORIGINAL_PATH/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java
+++ MODIFIED_PATH/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java
@@ -9,15 +9,20 @@
     if (outerClassInstance == null) {
       return noArgConstructorcls;
     }
-    return withOuterClasscls;
+    return withParams(cls, outerClassInstance);
   }
-  private <T> T withOuterClass(Class<T> cls) {
+  private static <T> T withParams(Class<T> cls, Object... params) {
     try {
-      Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());
-      return c.newInstanceouterClassInstance;
+      for (Constructor<?> constructor : cls.getDeclaredConstructors()) {
+        Class<?>[] types = constructor.getParameterTypes();
+        if (paramsMatch(types, params)) {
+          return T constructor.newInstanceparams;
+        }
+      }
     } catch (Exception e) {
       throw paramsException(cls, e);
     }
+    throw paramsException(cls, null);
   }
   private static <T> InstantationException paramsException(Class<T> cls, Exception e) {
     return new InstantationException(
@@ -28,6 +33,17 @@
             + " parameter-less constructor.",
         e);
   }
+  private static boolean paramsMatch(Class<?>[] types, Object[] params) {
+    if (params.length != types.length) {
+      return false;
+    }
+    for (int i = 0; i < params.length; i++) {
+      if (!types[i].isInstance(params[i])) {
+        return false;
+      }
+    }
+    return true;
+  }
   private static <T> T noArgConstructor(Class<T> cls) {
     try {
       return cls.newInstance();
