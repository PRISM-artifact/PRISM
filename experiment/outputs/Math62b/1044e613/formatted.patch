diff -rwu ORIGINAL_PATH/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java MODIFIED_PATH/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java
--- ORIGINAL_PATH/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java
+++ MODIFIED_PATH/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java
@@ -9,7 +9,6 @@
 import org.apache.commons.math.optimization.ConvergenceChecker;
 import org.apache.commons.math.optimization.GoalType;
 import org.apache.commons.math.random.RandomGenerator;
-import org.apache.commons.math.util.FastMath;
 public class MultiStartUnivariateRealOptimizer<FUNC extends UnivariateRealFunction>
     implements BaseUnivariateRealOptimizer<FUNC> {
   private final BaseUnivariateRealOptimizer<FUNC> optimizer;
@@ -51,7 +50,7 @@
   public UnivariateRealPointValuePair optimize(
       final FUNC f, final GoalType goal, final double min, final double max)
       throws FunctionEvaluationException {
-    return optimize(f, goal, min, max, 0);
+    return optimize(f, goal, min, max, min + 0.5 * (max - min));
   }
   public UnivariateRealPointValuePair optimize(
       final FUNC f,
@@ -64,10 +63,8 @@
     totalEvaluations = 0;
     for (int i = 0; i < starts; ++i) {
       try {
-        final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);
-        final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);
-        optima[i] =
-            optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));
+        final double s = (i == 0) ? startValue : min + generator.nextDouble() * (max - min);
+        optima[i] = optimizer.optimize(f, goal, min, max, s);
       } catch (FunctionEvaluationException fee) {
         optima[i] = null;
       } catch (ConvergenceException ce) {
