diff -rwu ORIGINAL_PATH/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java MODIFIED_PATH/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
--- ORIGINAL_PATH/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
+++ MODIFIED_PATH/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
@@ -143,7 +143,7 @@
   }
   private Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {
     Integer row = null;
-    int start = getNumObjectiveFunctions();
+    int start = ignoreObjectiveRows ? getNumObjectiveFunctions() : 0;
     for (int i = start; i < getHeight(); i++) {
       if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {
         row = i;
@@ -174,12 +174,12 @@
   }
   protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-    Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());
+    Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());
     double mostNegative =
         negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
     Set<Integer> basicRows = new HashSet<Integer>();
     for (int i = 0; i < coefficients.length; i++) {
-      Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+      Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);
       if (basicRows.containsbasicRow) {
         coefficients[i] = 0;
       } else {
