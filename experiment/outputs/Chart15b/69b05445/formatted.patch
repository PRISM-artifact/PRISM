diff -rwu ORIGINAL_PATH/source/org/jfree/chart/plot/PiePlot3D.java MODIFIED_PATH/source/org/jfree/chart/plot/PiePlot3D.java
--- ORIGINAL_PATH/source/org/jfree/chart/plot/PiePlot3D.java
+++ MODIFIED_PATH/source/org/jfree/chart/plot/PiePlot3D.java
@@ -1,29 +1,13 @@
 package org.jfree.chart.plot;
-import java.awt.AlphaComposite;
 import java.awt.Color;
-import java.awt.Composite;
-import java.awt.Font;
-import java.awt.FontMetrics;
 import java.awt.Graphics2D;
 import java.awt.Paint;
-import java.awt.Polygon;
-import java.awt.Shape;
 import java.awt.Stroke;
 import java.awt.geom.Arc2D;
 import java.awt.geom.Area;
-import java.awt.geom.Ellipse2D;
-import java.awt.geom.Point2D;
 import java.awt.geom.Rectangle2D;
 import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import org.jfree.chart.entity.EntityCollection;
-import org.jfree.chart.entity.PieSectionEntity;
 import org.jfree.chart.event.PlotChangeEvent;
-import org.jfree.chart.labels.PieToolTipGenerator;
-import org.jfree.chart.util.RectangleInsets;
-import org.jfree.data.general.DatasetUtilities;
 import org.jfree.data.general.PieDataset;
 public class PiePlot3D extends PiePlot implements Serializable {
   private static final long serialVersionUID = 3408984188945161432L;
@@ -50,318 +34,6 @@
     this.darkerSides = darker;
     notifyListeners(new PlotChangeEventthis);
   }
-  public void draw(
-      Graphics2D g2,
-      Rectangle2D plotArea,
-      Point2D anchor,
-      PlotState parentState,
-      PlotRenderingInfo info) {
-    RectangleInsets insets = getInsets();
-    insets.trimplotArea;
-    Rectangle2D originalPlotArea = Rectangle2D plotArea.clone();
-    if (info != null) {
-      info.setPlotAreaplotArea;
-      info.setDataAreaplotArea;
-    }
-    drawBackground(g2, plotArea);
-    Shape savedClip = g2.getClip();
-    g2.clipplotArea;
-    double gapPercent = getInteriorGap();
-    double labelPercent = 0.0;
-    if (getLabelGenerator() != null) {
-      labelPercent = getLabelGap() + getMaximumLabelWidth();
-    }
-    double gapHorizontal = plotArea.getWidth() * (gapPercent + labelPercent) * 2.0;
-    double gapVertical = plotArea.getHeight() * gapPercent * 2.0;
-    if DEBUG_DRAW_INTERIOR {
-      double hGap = plotArea.getWidth() * getInteriorGap();
-      double vGap = plotArea.getHeight() * getInteriorGap();
-      double igx1 = plotArea.getX() + hGap;
-      double igx2 = plotArea.getMaxX() - hGap;
-      double igy1 = plotArea.getY() + vGap;
-      double igy2 = plotArea.getMaxY() - vGap;
-      g2.setPaintColor.lightGray;
-      g2.draw(new Rectangle2D.Double(igx1, igy1, igx2 - igx1, igy2 - igy1));
-    }
-    double linkX = plotArea.getX() + gapHorizontal / 2;
-    double linkY = plotArea.getY() + gapVertical / 2;
-    double linkW = plotArea.getWidth() - gapHorizontal;
-    double linkH = plotArea.getHeight() - gapVertical;
-    if (isCircular()) { 
-      double min = Math.min(linkW, linkH) / 2;
-      linkX = (linkX + linkX + linkW) / 2 - min;
-      linkY = (linkY + linkY + linkH) / 2 - min;
-      linkW = 2 * min;
-      linkH = 2 * min;
-    }
-    PiePlotState state = initialise(g2, plotArea, this, null, info);
-    Rectangle2D linkAreaXX =
-        new Rectangle2D.Double(linkX, linkY, linkW, linkH * (1 - this.depthFactor));
-    state.setLinkArealinkAreaXX;
-    if DEBUG_DRAW_LINK_AREA {
-      g2.setPaintColor.blue;
-      g2.drawlinkAreaXX;
-      g2.setPaintColor.yellow;
-      g2.draw(
-          new Ellipse2D.Double(
-              linkAreaXX.getX(), linkAreaXX.getY(), linkAreaXX.getWidth(), linkAreaXX.getHeight()));
-    }
-    double hh = linkW * getLabelLinkMargin();
-    double vv = linkH * getLabelLinkMargin();
-    Rectangle2D explodeArea =
-        new Rectangle2D.Double(linkX + hh / 2.0, linkY + vv / 2.0, linkW - hh, linkH - vv);
-    state.setExplodedPieAreaexplodeArea;
-    double maximumExplodePercent = getMaximumExplodePercent();
-    double percent = maximumExplodePercent / (1.0 + maximumExplodePercent);
-    double h1 = explodeArea.getWidth() * percent;
-    double v1 = explodeArea.getHeight() * percent;
-    Rectangle2D pieArea =
-        new Rectangle2D.Double(
-            explodeArea.getX() + h1 / 2.0,
-            explodeArea.getY() + v1 / 2.0,
-            explodeArea.getWidth() - h1,
-            explodeArea.getHeight() - v1);
-    int depth = int (pieArea.getHeight() * this.depthFactor);
-    Rectangle2D linkArea = new Rectangle2D.Double(linkX, linkY, linkW, linkH - depth);
-    state.setLinkArealinkArea;
-    state.setPieAreapieArea;
-    state.setPieCenterX(pieArea.getCenterX());
-    state.setPieCenterY(pieArea.getCenterY() - depth / 2.0);
-    state.setPieWRadius(pieArea.getWidth() / 2.0);
-    state.setPieHRadius((pieArea.getHeight() - depth) / 2.0);
-    PieDataset dataset = getDataset();
-    if (DatasetUtilities.isEmptyOrNull(getDataset())) {
-      drawNoDataMessage(g2, plotArea);
-      g2.setClipsavedClip;
-      drawOutline(g2, plotArea);
-      return;
-    }
-    if (dataset.getKeys().size() > plotArea.getWidth()) {
-      String text = "Too many elements";
-      Font sfont = new Font("dialog", Font.BOLD, 10);
-      g2.setFontsfont;
-      FontMetrics fm = g2.getFontMetricssfont;
-      int stringWidth = fm.stringWidthtext;
-      g2.drawString(
-          text,
-          int (plotArea.getX() + (plotArea.getWidth() - stringWidth) / 2),
-          int (plotArea.getY() + (plotArea.getHeight() / 2)));
-      return;
-    }
-    if (isCircular()) {
-      double min = Math.min(plotArea.getWidth(), plotArea.getHeight()) / 2;
-      plotArea =
-          new Rectangle2D.Double(
-              plotArea.getCenterX() - min, plotArea.getCenterY() - min, 2 * min, 2 * min);
-    }
-    List sectionKeys = dataset.getKeys();
-    if (sectionKeys.size() == 0) {
-      return;
-    }
-    double arcX = pieArea.getX();
-    double arcY = pieArea.getY();
-    Composite originalComposite = g2.getComposite();
-    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, getForegroundAlpha()));
-    double totalValue = DatasetUtilities.calculatePieDatasetTotaldataset;
-    double runningTotal = 0;
-    if (depth < 0) {
-      return; 
-    }
-    ArrayList arcList = new ArrayList();
-    Arc2D.Double arc;
-    Paint paint;
-    Paint outlinePaint;
-    Stroke outlineStroke;
-    Iterator iterator = sectionKeys.iterator();
-    while (iterator.hasNext()) {
-      Comparable currentKey = Comparable iterator.next();
-      Number dataValue = dataset.getValuecurrentKey;
-      if (dataValue == null) {
-        arcList.addnull;
-        continue;
-      }
-      double value = dataValue.doubleValue();
-      if (value <= 0) {
-        arcList.addnull;
-        continue;
-      }
-      double startAngle = getStartAngle();
-      double direction = getDirection().getFactor();
-      double angle1 = startAngle + (direction * (runningTotal * 360)) / totalValue;
-      double angle2 = startAngle + (direction * (runningTotal + value) * 360) / totalValue;
-      if (Math.abs(angle2 - angle1) > getMinimumArcAngleToDraw()) {
-        arcList.add(
-            new Arc2D.Double(
-                arcX,
-                arcY + depth,
-                pieArea.getWidth(),
-                pieArea.getHeight() - depth,
-                angle1,
-                angle2 - angle1,
-                Arc2D.PIE));
-      } else {
-        arcList.addnull;
-      }
-      runningTotal += value;
-    }
-    Shape oldClip = g2.getClip();
-    Ellipse2D top =
-        new Ellipse2D.Double(
-            pieArea.getX(), pieArea.getY(), pieArea.getWidth(), pieArea.getHeight() - depth);
-    Ellipse2D bottom =
-        new Ellipse2D.Double(
-            pieArea.getX(),
-            pieArea.getY() + depth,
-            pieArea.getWidth(),
-            pieArea.getHeight() - depth);
-    Rectangle2D lower =
-        new Rectangle2D.Double(
-            top.getX(), top.getCenterY(), pieArea.getWidth(), bottom.getMaxY() - top.getCenterY());
-    Rectangle2D upper =
-        new Rectangle2D.Double(
-            pieArea.getX(), top.getY(), pieArea.getWidth(), bottom.getCenterY() - top.getY());
-    Area a = new Areatop;
-    a.add(new Arealower);
-    Area b = new Areabottom;
-    b.add(new Areaupper);
-    Area pie = new Areaa;
-    pie.intersectb;
-    Area front = new Areapie;
-    front.subtract(new Areatop);
-    Area back = new Areapie;
-    back.subtract(new Areabottom);
-    int[] xs;
-    int[] ys;
-    arc =
-        new Arc2D.Double(
-            arcX, arcY + depth, pieArea.getWidth(), pieArea.getHeight() - depth, 0, 360, Arc2D.PIE);
-    int categoryCount = arcList.size();
-    for (int categoryIndex = 0; categoryIndex < categoryCount; categoryIndex++) {
-      arc = Arc2D.Double arcList.getcategoryIndex;
-      if (arc == null) {
-        continue;
-      }
-      Comparable key = getSectionKeycategoryIndex;
-      paint = lookupSectionPaint(key, true);
-      outlinePaint = lookupSectionOutlinePaintkey;
-      outlineStroke = lookupSectionOutlineStrokekey;
-      g2.setPaintpaint;
-      g2.fillarc;
-      g2.setPaintoutlinePaint;
-      g2.setStrokeoutlineStroke;
-      g2.drawarc;
-      g2.setPaintpaint;
-      Point2D p1 = arc.getStartPoint();
-      xs =
-          new int[] {
-            int arc.getCenterX(), int arc.getCenterX(), int p1.getX(), int p1.getX()
-          };
-      ys =
-          new int[] {
-            int arc.getCenterY(),
-            int arc.getCenterY() - depth,
-            int p1.getY() - depth,
-            int p1.getY()
-          };
-      Polygon polygon = new Polygon(xs, ys, 4);
-      g2.setPaintjava.awt.Color.lightGray;
-      g2.fillpolygon;
-      g2.setPaintoutlinePaint;
-      g2.setStrokeoutlineStroke;
-      g2.drawpolygon;
-      g2.setPaintpaint;
-    }
-    g2.setPaintColor.gray;
-    g2.fillback;
-    g2.fillfront;
-    int cat = 0;
-    iterator = arcList.iterator();
-    while (iterator.hasNext()) {
-      Arc2D segment = Arc2D iterator.next();
-      if (segment != null) {
-        Comparable key = getSectionKeycat;
-        paint = lookupSectionPaint(key, true);
-        outlinePaint = lookupSectionOutlinePaintkey;
-        outlineStroke = lookupSectionOutlineStrokekey;
-        drawSide(
-            g2, pieArea, segment, front, back, paint, outlinePaint, outlineStroke, false, true);
-      }
-      cat++;
-    }
-    cat = 0;
-    iterator = arcList.iterator();
-    while (iterator.hasNext()) {
-      Arc2D segment = Arc2D iterator.next();
-      if (segment != null) {
-        Comparable key = getSectionKeycat;
-        paint = lookupSectionPaintkey;
-        outlinePaint = lookupSectionOutlinePaintkey;
-        outlineStroke = lookupSectionOutlineStrokekey;
-        drawSide(
-            g2, pieArea, segment, front, back, paint, outlinePaint, outlineStroke, true, false);
-      }
-      cat++;
-    }
-    g2.setClipoldClip;
-    Arc2D upperArc;
-    for (int sectionIndex = 0; sectionIndex < categoryCount; sectionIndex++) {
-      arc = Arc2D.Double arcList.getsectionIndex;
-      if (arc == null) {
-        continue;
-      }
-      upperArc =
-          new Arc2D.Double(
-              arcX,
-              arcY,
-              pieArea.getWidth(),
-              pieArea.getHeight() - depth,
-              arc.getAngleStart(),
-              arc.getAngleExtent(),
-              Arc2D.PIE);
-      Comparable currentKey = Comparable sectionKeys.getsectionIndex;
-      paint = lookupSectionPaint(currentKey, true);
-      outlinePaint = lookupSectionOutlinePaintcurrentKey;
-      outlineStroke = lookupSectionOutlineStrokecurrentKey;
-      g2.setPaintpaint;
-      g2.fillupperArc;
-      g2.setStrokeoutlineStroke;
-      g2.setPaintoutlinePaint;
-      g2.drawupperArc;
-      if (info != null) {
-        EntityCollection entities = info.getOwner().getEntityCollection();
-        if (entities != null) {
-          String tip = null;
-          PieToolTipGenerator tipster = getToolTipGenerator();
-          if (tipster != null) {
-            tip = tipster.generateToolTip(dataset, currentKey);
-          }
-          String url = null;
-          if (getURLGenerator() != null) {
-            url = getURLGenerator().generateURL(dataset, currentKey, getPieIndex());
-          }
-          PieSectionEntity entity =
-              new PieSectionEntity(
-                  upperArc, dataset, getPieIndex(), sectionIndex, currentKey, tip, url);
-          entities.addentity;
-        }
-      }
-      List keys = dataset.getKeys();
-      Rectangle2D adjustedPlotArea =
-          new Rectangle2D.Double(
-              originalPlotArea.getX(),
-              originalPlotArea.getY(),
-              originalPlotArea.getWidth(),
-              originalPlotArea.getHeight() - depth);
-      if (getSimpleLabels()) {
-        drawSimpleLabels(g2, keys, totalValue, adjustedPlotArea, linkArea, state);
-      } else {
-        drawLabels(g2, keys, totalValue, adjustedPlotArea, linkArea, state);
-      }
-    }
-    g2.setClipsavedClip;
-    g2.setCompositeoriginalComposite;
-    drawOutline(g2, originalPlotArea);
-  }
   protected void drawSide(
       Graphics2D g2,
       Rectangle2D plotArea,
