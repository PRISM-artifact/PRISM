diff -rwu ORIGINAL_PATH/src/java/org/apache/commons/math/special/Gamma.java MODIFIED_PATH/src/java/org/apache/commons/math/special/Gamma.java
--- ORIGINAL_PATH/src/java/org/apache/commons/math/special/Gamma.java
+++ MODIFIED_PATH/src/java/org/apache/commons/math/special/Gamma.java
@@ -1,7 +1,6 @@
 package org.apache.commons.math.special;
 import java.io.Serializable;
 import org.apache.commons.math.MathException;
-import org.apache.commons.math.MaxIterationsExceededException;
 import org.apache.commons.math.util.ContinuedFraction;
 public class Gamma implements Serializable {
   private static final long serialVersionUID = -6587513359895466954L;
@@ -58,6 +57,18 @@
     } else {
       double n = 0.0; 
       double an = 1.0 / a; 
+      if (Double.isNaNx || (x <= 0.0)) {
+        ret = Double.NaN;
+      } else {
+        double g = 607.0 / 128.0;
+        double sum = 0.0;
+        for (int i = lanczos.length - 1; i > 0; --i) {
+          sum = sum + (lanczos[i] / (x + i));
+        }
+        sum = sum + lanczos[0];
+        double tmp = x + g + .5;
+        ret = ((x + .5) * Math.logtmp) - tmp + HALF_LOG_2_PI + Math.log(sum / x);
+      }
       double sum = an; 
       while (Math.absan > epsilon && n < maxIterations) {
         n = n + 1.0;
@@ -65,7 +76,6 @@
         sum = sum + an;
       }
       if (n >= maxIterations) {
-        throw new MaxIterationsExceededExceptionmaxIterations;
       } else {
         ret = Math.exp(-x + (a * Math.logx) - logGammaa) * sum;
       }
