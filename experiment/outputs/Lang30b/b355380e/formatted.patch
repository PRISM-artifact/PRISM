diff -rwu ORIGINAL_PATH/src/main/java/org/apache/commons/lang3/StringUtils.java MODIFIED_PATH/src/main/java/org/apache/commons/lang3/StringUtils.java
--- ORIGINAL_PATH/src/main/java/org/apache/commons/lang3/StringUtils.java
+++ MODIFIED_PATH/src/main/java/org/apache/commons/lang3/StringUtils.java
@@ -316,15 +316,23 @@
       return INDEX_NOT_FOUND;
     }
     int csLen = cs.length();
+    int csLast = csLen - 1;
     int searchLen = searchChars.length;
+    int searchLast = searchLen - 1;
     for (int i = 0; i < csLen; i++) {
       char ch = cs.charAti;
       for (int j = 0; j < searchLen; j++) {
         if (searchChars[j] == ch) {
+          if (i < csLast && j < searchLast && Character.isHighSurrogatech) {
+            if (searchChars[j + 1] == cs.charAt(i + 1)) {
+              return i;
+            }
+          } else {
           return i;
         }
       }
     }
+    }
     return INDEX_NOT_FOUND;
   }
   public static int indexOfAny(CharSequence cs, String searchChars) {
@@ -333,7 +341,7 @@
     }
     return indexOfAny(cs, searchChars.toCharArray());
   }
-  public static boolean containsAny(CharSequence cs, char[] searchChars) {
+  public static boolean containsAny(String cs, char[] searchChars) {
     if (isEmptycs || ArrayUtils.isEmptysearchChars) {
       return false;
     }
@@ -345,11 +353,11 @@
       char ch = cs.charAti;
       for (int j = 0; j < searchLength; j++) {
         if (searchChars[j] == ch) {
-          if (i < csLast
-              && j < searchLast
-              && ch >= Character.MIN_HIGH_SURROGATE
-              && ch <= Character.MAX_HIGH_SURROGATE) {
-            if (searchChars[j + 1] == cs.charAt(i + 1)) {
+          if (Character.isHighSurrogatech) {
+            if (j == searchLast) {
+              return true;
+            }
+            if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
               return true;
             }
           } else {
@@ -360,7 +368,7 @@
     }
     return false;
   }
-  public static boolean containsAny(CharSequence cs, String searchChars) {
+  public static boolean containsAny(String cs, String searchChars) {
     if (searchChars == null) {
       return false;
     }
@@ -371,15 +379,23 @@
       return INDEX_NOT_FOUND;
     }
     int csLen = cs.length();
+    int csLast = csLen - 1;
     int searchLen = searchChars.length;
+    int searchLast = searchLen - 1;
     outer:
     for (int i = 0; i < csLen; i++) {
       char ch = cs.charAti;
       for (int j = 0; j < searchLen; j++) {
         if (searchChars[j] == ch) {
+          if (i < csLast && j < searchLast && Character.isHighSurrogatech) {
+            if (searchChars[j + 1] == cs.charAt(i + 1)) {
+              continue outer;
+            }
+          } else {
           continue outer;
         }
       }
+      }
       return i;
     }
     return INDEX_NOT_FOUND;
@@ -391,10 +407,18 @@
     int strLen = str.length();
     for (int i = 0; i < strLen; i++) {
       char ch = str.charAti;
-      if (searchChars.indexOfch < 0) {
+      boolean chFound = searchChars.indexOfch >= 0;
+      if (i + 1 < strLen && Character.isHighSurrogatech) {
+        char ch2 = str.charAt(i + 1);
+        if (chFound && searchChars.indexOfch2 < 0) {
+          return i;
+        }
+      } else {
+        if (!chFound) {
         return i;
       }
     }
+    }
     return INDEX_NOT_FOUND;
   }
   public static boolean containsOnly(CharSequence cs, char[] valid) {
@@ -420,13 +444,24 @@
       return true;
     }
     int csLen = cs.length();
+    int csLast = csLen - 1;
     int searchLen = searchChars.length;
+    int searchLast = searchLen - 1;
     for (int i = 0; i < csLen; i++) {
       char ch = cs.charAti;
       for (int j = 0; j < searchLen; j++) {
         if (searchChars[j] == ch) {
+          if (Character.isHighSurrogatech) {
+            if (j == searchLast) {
           return false;
         }
+            if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
+              return false;
+            }
+          } else {
+            return false;
+          }
+        }
       }
     }
     return true;
