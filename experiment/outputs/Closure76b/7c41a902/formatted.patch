diff -rwu ORIGINAL_PATH/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java MODIFIED_PATH/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java
--- ORIGINAL_PATH/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java
+++ MODIFIED_PATH/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java
@@ -167,19 +167,31 @@
       switch (n.getParent().getType()) {
         case Token.OR:
         case Token.AND:
+          if (n.getNext() != null) {
+            state = isVariableReadBeforeKill(n.getNext(), variable);
+            if (state == VariableLiveness.KILL) {
+              state = VariableLiveness.MAYBE_LIVE;
+            }
+          }
+          break;
         case Token.HOOK:
+          if (n.getNext() != null && n.getNext().getNext() != null) {
+            state = checkHookBranchReadBeforeKill(n.getNext(), n.getNext().getNext(), variable);
+          }
+          break;
         default:
           for (Node sibling = n.getNext(); sibling != null; sibling = sibling.getNext()) {
-            if (!ControlFlowGraph.isEnteringNewCfgNodesibling) {
               state = isVariableReadBeforeKill(sibling, variable);
+            if (state != VariableLiveness.MAYBE_LIVE) {
+              break;
+            }
+          }
+      }
               if (state == VariableLiveness.READ) {
                 return true;
               } else if (state == VariableLiveness.KILL) {
                 return false;
               }
-            }
-          }
-      }
       n = n.getParent();
     }
     return false;
@@ -190,6 +202,9 @@
     KILL, 
   }
   private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
+    if (ControlFlowGraph.isEnteringNewCfgNoden) { 
+      return VariableLiveness.MAYBE_LIVE;
+    }
     if (NodeUtil.isNamen && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);
@@ -206,19 +221,30 @@
     switch (n.getType()) {
       case Token.OR:
       case Token.AND:
+        VariableLiveness v1 = isVariableReadBeforeKill(n.getFirstChild(), variable);
+        VariableLiveness v2 = isVariableReadBeforeKill(n.getLastChild(), variable);
+        if (v1 != VariableLiveness.MAYBE_LIVE) {
+          return v1;
+        } else if (v2 == VariableLiveness.READ) {
+          return VariableLiveness.READ;
+        } else {
+          return VariableLiveness.MAYBE_LIVE;
+        }
       case Token.HOOK:
+        VariableLiveness first = isVariableReadBeforeKill(n.getFirstChild(), variable);
+        if (first != VariableLiveness.MAYBE_LIVE) {
+          return first;
+        }
         return checkHookBranchReadBeforeKill(
             n.getFirstChild().getNext(), n.getLastChild(), variable);
       default:
         for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
-          if (!ControlFlowGraph.isEnteringNewCfgNodechild) { 
             VariableLiveness state = isVariableReadBeforeKill(child, variable);
             if (state != VariableLiveness.MAYBE_LIVE) {
               return state;
             }
           }
         }
-    }
     return VariableLiveness.MAYBE_LIVE;
   }
   private VariableLiveness checkHookBranchReadBeforeKill(
