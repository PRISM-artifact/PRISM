diff -rwu ORIGINAL_PATH/src/main/java/org/joda/time/MutableDateTime.java MODIFIED_PATH/src/main/java/org/joda/time/MutableDateTime.java
--- ORIGINAL_PATH/src/main/java/org/joda/time/MutableDateTime.java
+++ MODIFIED_PATH/src/main/java/org/joda/time/MutableDateTime.java
@@ -212,32 +212,42 @@
     if (type == null) {
       throw new IllegalArgumentException("Field must not be null");
     }
+    if (amount != 0) {
     setMillis(type.getField(getChronology()).add(getMillis(), amount));
   }
+  }
   public void setYear(final int year) {
     setMillis(getChronology().year().set(getMillis(), year));
   }
   public void addYears(final int years) {
+    if (years != 0) {
     setMillis(getChronology().years().add(getMillis(), years));
   }
+  }
   public void setWeekyear(final int weekyear) {
     setMillis(getChronology().weekyear().set(getMillis(), weekyear));
   }
   public void addWeekyears(final int weekyears) {
+    if (weekyears != 0) {
     setMillis(getChronology().weekyears().add(getMillis(), weekyears));
   }
+  }
   public void setMonthOfYear(final int monthOfYear) {
     setMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));
   }
   public void addMonths(final int months) {
+    if (months != 0) {
     setMillis(getChronology().months().add(getMillis(), months));
   }
+  }
   public void setWeekOfWeekyear(final int weekOfWeekyear) {
     setMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));
   }
   public void addWeeks(final int weeks) {
+    if (weeks != 0) {
     setMillis(getChronology().weeks().add(getMillis(), weeks));
   }
+  }
   public void setDayOfYear(final int dayOfYear) {
     setMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));
   }
@@ -248,14 +258,18 @@
     setMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));
   }
   public void addDays(final int days) {
+    if (days != 0) {
     setMillis(getChronology().days().add(getMillis(), days));
   }
+  }
   public void setHourOfDay(final int hourOfDay) {
     setMillis(getChronology().hourOfDay().set(getMillis(), hourOfDay));
   }
   public void addHours(final int hours) {
+    if (hours != 0) {
     setMillis(getChronology().hours().add(getMillis(), hours));
   }
+  }
   public void setMinuteOfDay(final int minuteOfDay) {
     setMillis(getChronology().minuteOfDay().set(getMillis(), minuteOfDay));
   }
@@ -263,8 +277,10 @@
     setMillis(getChronology().minuteOfHour().set(getMillis(), minuteOfHour));
   }
   public void addMinutes(final int minutes) {
+    if (minutes != 0) {
     setMillis(getChronology().minutes().add(getMillis(), minutes));
   }
+  }
   public void setSecondOfDay(final int secondOfDay) {
     setMillis(getChronology().secondOfDay().set(getMillis(), secondOfDay));
   }
@@ -272,8 +288,10 @@
     setMillis(getChronology().secondOfMinute().set(getMillis(), secondOfMinute));
   }
   public void addSeconds(final int seconds) {
+    if (seconds != 0) {
     setMillis(getChronology().seconds().add(getMillis(), seconds));
   }
+  }
   public void setMillisOfDay(final int millisOfDay) {
     setMillis(getChronology().millisOfDay().set(getMillis(), millisOfDay));
   }
@@ -281,8 +299,10 @@
     setMillis(getChronology().millisOfSecond().set(getMillis(), millisOfSecond));
   }
   public void addMillis(final int millis) {
+    if (millis != 0) {
     setMillis(getChronology().millis().add(getMillis(), millis));
   }
+  }
   public void setDate(final long instant) {
     setMillis(getChronology().millisOfDay().set(instant, getMillisOfDay()));
   }
