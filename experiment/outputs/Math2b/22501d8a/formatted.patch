diff -rwu ORIGINAL_PATH/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java MODIFIED_PATH/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
--- ORIGINAL_PATH/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
+++ MODIFIED_PATH/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java
@@ -61,9 +61,7 @@
       }
       k = 1.0 / k;
       tmp = mu + k * sigma;
-      if (tmp < upper) {
-        upper = (int Math.ceiltmp) - 1;
-      }
+      if (tmp < upper) {}
     }
     return solveInverseCumulativeProbability(p, lower, upper);
   }
diff -rwu ORIGINAL_PATH/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java MODIFIED_PATH/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java
--- ORIGINAL_PATH/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java
+++ MODIFIED_PATH/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java
@@ -53,6 +53,7 @@
     this.random = random;
     this.membershipMatrix = null;
     this.points = null;
+    boolean emptyCluster = false;
     this.clusters = null;
   }
   public int getK() {
