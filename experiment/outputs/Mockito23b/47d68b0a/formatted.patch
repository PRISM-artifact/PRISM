diff -rwu ORIGINAL_PATH/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java MODIFIED_PATH/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
--- ORIGINAL_PATH/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
+++ MODIFIED_PATH/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
@@ -13,18 +13,30 @@
 import org.mockito.stubbing.Answer;
 public class ReturnsDeepStubs implements Answer<Object>, Serializable {
   private static final long serialVersionUID = -7105341425736035847L;
-  private MockitoCore mockitoCore = new MockitoCore();
-  private ReturnsEmptyValues delegate = new ReturnsEmptyValues();
+  private transient MockitoCore mockitoCore;
+  private transient ReturnsEmptyValues delegate;
   public Object answer(InvocationOnMock invocation) throws Throwable {
     GenericMetadataSupport returnTypeGenericMetadata =
         actualParameterizedType(invocation.getMock())
             .resolveGenericReturnType(invocation.getMethod());
     Class<?> rawType = returnTypeGenericMetadata.rawType();
+    instantiateMockitoCoreIfNeeded();
+    instantiateDelegateIfNeeded();
     if (!mockitoCore.isTypeMockablerawType) {
       return delegate.returnValueForrawType;
     }
     return getMock(invocation, returnTypeGenericMetadata);
   }
+  private synchronized void instantiateMockitoCoreIfNeeded() {
+    if (mockitoCore == null) {
+      mockitoCore = new MockitoCore();
+    }
+  }
+  private synchronized void instantiateDelegateIfNeeded() {
+    if (delegate == null) {
+      delegate = new ReturnsEmptyValues();
+    }
+  }
   private Object getMock(
       InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata)
       throws Throwable {
@@ -46,7 +58,9 @@
         returnTypeGenericMetadata.rawExtraInterfaces().length > 0
             ? withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())
             : withSettings();
-    return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsingreturnTypeGenericMetadata);
+    return mockSettings
+        .serializable()
+        .defaultAnswer(returnsDeepStubsAnswerUsingreturnTypeGenericMetadata);
   }
   private ReturnsDeepStubs returnsDeepStubsAnswerUsing(
       final GenericMetadataSupport returnTypeGenericMetadata) {
@@ -60,7 +74,7 @@
   private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container)
       throws Throwable {
     container.addAnswer(
-        new Answer<Object>() {
+        new SerializableAnswer() {
           public Object answer(InvocationOnMock invocation) throws Throwable {
             return mock;
           }
@@ -68,6 +82,7 @@
         false);
     return mock;
   }
+  abstract class SerializableAnswer implements Answer<Object>, Serializable {}
   protected GenericMetadataSupport actualParameterizedType(Object mock) {
     CreationSettings mockSettings =
         CreationSettings new MockUtil().getMockHandlermock.getMockSettings();
