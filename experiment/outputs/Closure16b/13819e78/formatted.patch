diff -rwu ORIGINAL_PATH/src/com/google/javascript/jscomp/ScopedAliases.java MODIFIED_PATH/src/com/google/javascript/jscomp/ScopedAliases.java
--- ORIGINAL_PATH/src/com/google/javascript/jscomp/ScopedAliases.java
+++ MODIFIED_PATH/src/com/google/javascript/jscomp/ScopedAliases.java
@@ -1,4 +1,5 @@
 package com.google.javascript.jscomp;
+import com.google.common.base.Preconditions;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -105,14 +106,19 @@
   }
   private class AliasedTypeNode implements AliasUsage {
     private final Node typeReference;
+    private final Node aliasDefinition;
     private final String aliasName;
-    AliasedTypeNode(Node typeReference, String aliasName) {
+    AliasedTypeNode(Node typeReference, Node aliasDefinition, String aliasName) {
       this.typeReference = typeReference;
+      this.aliasDefinition = aliasDefinition;
       this.aliasName = aliasName;
     }
     @Override
     public void applyAlias() {
-      typeReference.setStringaliasName;
+      String typeName = typeReference.getString();
+      String aliasExpanded = Preconditions.checkNotNull(aliasDefinition.getQualifiedName());
+      Preconditions.checkState(typeName.startsWithaliasName);
+      typeReference.setString(typeName.replaceFirst(aliasName, aliasExpanded));
     }
   }
   private class Traversal implements NodeTraversal.ScopedCallback {
@@ -315,9 +321,7 @@
         Var aliasVar = aliases.getbaseName;
         if (aliasVar != null) {
           Node aliasedNode = aliasVar.getInitialValue();
-          aliasUsages.add(
-              new AliasedTypeNode(
-                  typeNode, aliasedNode.getQualifiedName() + name.substringendIndex));
+          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode, baseName));
         }
       }
       for (Node child = typeNode.getFirstChild(); child != null; child = child.getNext()) {
